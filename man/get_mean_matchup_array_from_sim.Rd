% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nash.r
\name{get_mean_matchup_array_from_sim}
\alias{get_mean_matchup_array_from_sim}
\title{Get mean matchup array directly from sim}
\usage{
get_mean_matchup_array_from_sim(
  sim,
  deck_set = c("multi", "draft", "mono", "custom"),
  deck_names = stop("deck_names must be specified for custom sets"),
  players = NULL,
  player_seed = 1,
  progress = FALSE
)
}
\arguments{
\item{sim}{A list, containing a versus model's tidy results.}

\item{deck_set}{List of decks to use. \code{multi} uses all legal multicolour decks.
\code{draft} also includes decks where none of the specs are from the same
colour as the starter. \code{mono} only includes monocolour decks.
\code{custom} allows a custom set of decks, given in the \code{deck_names}
argument, that is otherwise ignored.}

\item{deck_names}{A character vector, giving standardised deck names to get
matchups for. Standardised names may used the package's default nicknames.}

\item{players}{A character vector, giving players to assign to the given
decks, in order. If NULL, players are not accounted for. Otherwise, the
length must be equal to the length of the deck names. Players not present
in the model information will have their skill samples generated.}

\item{player_seed}{An integer, giving the random seed used to generate
unknown players' skill samples.}

\item{progress}{If TRUE, and parallel = FALSE, messages the current sample
number.}
}
\value{
A mean matchup matrix.
}
\description{
This is similar to calling \code{\link{get_matchup_array}}, then averaging
over the samples. The difference is that the matchup samples are calculated
one at a time. This allows calculating the mean matchup in cases where the
matchup array cannot fit into memory.
}
